#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var config = require('config');
var debug = require('debug')('envisaclient:server');
var http = require('http')
  ,fs = require('fs')
  //objects is a custom module I use to translate the responses from Evnsialink
  ,sys_response = require('../objects.js')
  //net is required to make the TCP connection to the Envisalink
  ,net = require('net')
  //These two lines are used only if you want to record everything to a syslog server.
  ,syslog = require('syslogudp')
  ,logger = syslog.createClient(config.get('syslog.port'),config.get('syslog.host'))
  //  strReady indicates the normal state of the system
  //  I don't want to fill my syslog with this, so if this then don't log
  ,strReady = "%00,01,1C08,08,00"
  //This is the connection to Envisalink
  ,client = net.createConnection(config.get('envisalink.port'),config.get('envisalink.host'))

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.get('webserver.port'));
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server);


//handle comms between the web server and the web clients
io.on('connection', function (socket) {
  //once a webclient has connected, send this object to their browser.
    socket.emit('welcome', 'Server established connection to Client');
    //their browser will respond immediately on connection with this
    socket.on('thank you', function (data) {
    //That response so sent to console
  })
    socket.on('rxcmd',function (data){
      socket.emit('data',data)
      console.log(data)
  })
  socket.on('txcmd',function (data){
    client.write(data)
      console.log(data)
  })
});

client.setEncoding('utf8');
client.on('data', function (resp) {
  //  Login was successful, the server will now start talking to the client
  //  Envisalink seems to send multiple responses either really fast or as one response.
  //  This splits each line and processes them separate
  var arrLines = resp.split('\n')
  for(i=0;i<arrLines.length-1;i++){
    //  Check for empty responses, and anything that matches the system ready response
    //  We don't want to fill the log with those
    if(arrLines[i]!=null && arrLines[i].search(strReady)==-1){
      //console.log(sys_response(arrLines[i].trim()))
      io.sockets.emit('rxcmd',sys_response(arrLines[i].trim()))
      logger.log(sys_response(arrLines[i].trim()).raw,syslog.LOG_INFO);
    }
  };
}).on('connect', function () {
  // Immediately after connection, send login Password
  logger.log('Authentication process initiated',syslog.LOG_INFO);
  //send password to EnvisaLink
  client.write(config.get('users.password'))
}).on('error', function() {
  // The server is already connected to something (or thinks it is)
  logger.log('Oops... Something is wrong. Restart you Envisalink module.',syslog.LOG_INFO);
}).on('end', function() {
  //  Connect was ended
  logger.log('Connection to Server Terminated',syslog.LOG_INFO);
});

process.on('SIGINT', function() {
  io.close();
  client.end()
  process.exit();
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
